{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setTouched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","listMovie","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setId","isDisable","setIsDisable","useEffect","onSubmit","preventDefault","pattern","test","prev","currentTarget","reset","onClick","str","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8110f42e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { FormEvent, useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (arg: ()=> Movie[]) => void;\n  listMovie: Movie[];\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd, listMovie }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setId] = useState('');\n  const [isDisable, setIsDisable] = useState(true);\n\n  const onFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    if (!pattern.test(imgUrl)) {\n      setImgUrl('');\n\n      return;\n    }\n\n    if (!pattern.test(imdbUrl)) {\n      setImdbUrl('');\n\n      return;\n    }\n\n    onAdd(() => ([\n      ...listMovie,\n      {\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      },\n    ]));\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setId('');\n    setCount(prev => prev + 1);\n    event.currentTarget.reset();\n  };\n\n  useEffect(() => {\n    setIsDisable(!(title && imgUrl && imdbUrl && imdbId));\n  }, [title, imgUrl, imdbUrl, imdbId]);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={onFormSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n      {isDisable && (\n        <button\n          type=\"button\"\n          onClick={() => {\n            setTitle('The Umbrella Academy');\n            setDescription(`A family of former child heroes,\n          now grown apart, must reunite to\n          continue to protect the world.`);\n            setImgUrl('https://m.media-amazon.com/images/'\n          + 'M/MV5BNTZlNTY4ZGMtMzJjZC00NWFkLWFkZjItZ'\n          + 'Dc2Y2Y1NGUyNzFhXkEyXkFqcGdeQXVyMTE5MTg5NDIw.'\n          + '_V1_QL75_UX380_CR0,4,380,562_.jpg');\n            setImdbUrl('https://www.imdb.com/title/tt1312171/');\n            setId('tt1312171');\n          }}\n        >\n          add Sample for test\n        </button>\n      )}\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(str) => setTitle(str)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={str => setDescription(str)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={str => setImgUrl(str)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={str => setImdbUrl(str)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={str => setId(str)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisable}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={setMovies}\n          listMovie={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}